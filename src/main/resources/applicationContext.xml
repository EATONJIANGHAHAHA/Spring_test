<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd
">

<!--    &lt;!&ndash;开启注解扫面&ndash;&gt;
    <context:component-scan base-package="com.eaton.annocation"/>-->

<!--    &lt;!&ndash; 创建全交给工厂&ndash;&gt;
    <bean id="userService" class="com.eaton.ioc.demo1.UserServiceImpl"/>-->

<!--    &lt;!&ndash;Bean实例化的三种方式&ndash;&gt;
    &lt;!&ndash;默认无参构造器&ndash;&gt;
    <bean id="bean1" class="Bean1"/>
    &lt;!&ndash;静态工厂方式&ndash;&gt;
    <bean id="bean2" class="Bean2Factory" factory-method="createBean2"/>
    &lt;!&ndash;实力工厂方式&ndash;&gt;
    <bean id="bean3Factory" class="Bean3Factory"/>
    <bean id="bean3" factory-bean="bean3Factory" factory-method="createBean3"/>-->

<!--    &lt;!&ndash;bean的作用范围&ndash;&gt;
    <bean id="person" class="Person" scope="prototype"/>-->

<!--    &lt;!&ndash;Bean的生命周期&ndash;&gt;
    <bean id="man" class="Man" init-method="setup" destroy-method="teardown">
        <property name="name" value="张三"/>
    </bean>
    <bean class="MyBeanPostProcessor"/>
    <bean id="userDao" class="UserDaoImpl"/>-->

<!--    &lt;!&ndash;Bean构造方法的属性注入&ndash;&gt;
    <bean id="user" class="User">
        <constructor-arg name="name" value="张三"/>
        <constructor-arg name="age" value="23"/>
    </bean>-->

<!--    &lt;!&ndash;使用set方法的属性注入&ndash;&gt;
    <bean id="person" class="Person">
        <property name="name" value="李四"/>
        <property name="age" value="32"/>
        &lt;!&ndash;引用了一个Bean的id，使用类的属性名进行Bean绑定。基本类型或包装其类型使用value，Bean使用ref&ndash;&gt;
        <property name="cat" ref="cat"/>
    </bean>
    <bean id="cat" class="Cat">
        <property name="name" value="Tongtong"/>
    </bean>-->

<!--    &lt;!&ndash;p命名空间树型注入&ndash;&gt;
    <bean id="person" class="Person" p:name="大黄" p:age="34" p:cat-ref="cat"/>
    <bean id="cat" class="Cat" p:name="小黄"/>-->

<!--    &lt;!&ndash;
    SpEL（Spring表达式语言）注入
    语法：#{表达式}
    &ndash;&gt;
    <bean id="category" class="Category">
        <property name="name" value="#{'服装'}"/>
    </bean>
    <bean id="productInfo" class="ProductInfo"/>
    <bean id="product" class="Product">
        <property name="name" value="#{'男装'}"/>
        <property name="price" value="#{productInfo.calculatePrice()}"/>
        <property name="category" value="#{category}"/>
    </bean>-->

<!--    &lt;!&ndash;复杂类型的属性注入&ndash;&gt;
    <bean id="collectionBean" class="com.eaton.ioc.demo5.CollectionBean">
        &lt;!&ndash;数组类型&ndash;&gt;
        <property name="arrs">
            <list>
                <value>aaa</value>
                <value>bbb</value>
                <value>ccc</value>
            </list>
        </property>
        &lt;!&ndash;List&ndash;&gt;
        <property name="list">
            <list>
                <value>111</value>
                <value>222</value>
                <value>333</value>
            </list>
        </property>
        &lt;!&ndash;Set&ndash;&gt;
        <property name="set">
            <set>
                <value>ddd</value>
                <value>eee</value>
                <value>fff</value>
            </set>
        </property>
        &lt;!&ndash;map&ndash;&gt;
        <property name="map">
            <map>
                <entry key="aaa" value="111"/>
                <entry key="bbb" value="222"/>
                <entry key="ccc" value="333"/>
            </map>
        </property>
        &lt;!&ndash;properties，通常在整合其他框架的时候使用&ndash;&gt;
        <property name="properties">
            <props>
                <prop key="username">root</prop>
                <prop key="password">1234</prop>
            </props>
        </property>
    </bean>-->

<!--    &lt;!&ndash;注解扫描和xml文件配置配合使用的依赖注入&ndash;&gt;
    <context:annotation-config/> &lt;!&ndash;这是类属性注入，在没有打开包扫描的时候使用，@Controler, @Service等注解无法使用&ndash;&gt;
    <bean id="productService" class="com.eaton.annocation.demo3.ProductService">
    </bean>
    <bean id="productDao" class="com.eaton.annocation.demo3.ProductDao"/>
    <bean id="categoryDao" class="com.eaton.annocation.demo3.CategoryDao"/>-->

<!--    &lt;!&ndash;一般切面案例&ndash;&gt;
    &lt;!&ndash;配置目标类&ndash;&gt;
    <bean id="studentDao" class="com.eaton.aop.demo3.StudentDaoImpl"/>
    &lt;!&ndash;前置通知类型&ndash;&gt;
    <bean id="myBeforeAdvice" class="com.eaton.aop.demo3.MyBeforeAdvice"/>
    &lt;!&ndash;Sping AOP产生代理对象&ndash;&gt;
    <bean id="studentDaoProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
        &lt;!&ndash;配置目标类&ndash;&gt;
        <property name="target" ref="studentDao"/>
        &lt;!&ndash;实现的接口&ndash;&gt;
        <property name="proxyInterfaces" value="com.eaton.aop.demo3.StudentDao"/>
        &lt;!&ndash;采用拦截的名称&ndash;&gt;
        <property name="interceptorNames" value="myBeforeAdvice"/>
    </bean>-->

<!--    &lt;!&ndash;带切入点切面&ndash;&gt;
    &lt;!&ndash;配置目标类&ndash;&gt;
    <bean id="customerDao" class="com.eaton.aop.demo4.CustomerDao"/>
    &lt;!&ndash;通知&ndash;&gt;
    <bean id="myAroundAdvice" class="com.eaton.aop.demo4.MyAroundAdvice"/>
    &lt;!&ndash;现在对目标类的某个方法进行增强，这时需要配置带有切入点的切面&ndash;&gt;
    <bean id="myAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
        &lt;!&ndash;使用切面规则的正则表达式来判断切点&ndash;&gt;
        <property name="patterns" value=".*save.*,.*delete.*"/>
        <property name="advice" ref="myAroundAdvice"/>
    </bean>
    &lt;!&ndash;配置产生代理&ndash;&gt;
    <bean id="customerDaoProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="customerDao"/>
        <property name="proxyTargetClass" value="true"/>
        <property name="interceptorNames" value="myAdvisor"/>
    </bean>-->

<!--    &lt;!&ndash;不带切点的自动代理配置&ndash;&gt;
    &lt;!&ndash;配置目标类&ndash;&gt;
    <bean id="studentDao" class="com.eaton.aop.demo5.StudentDaoImpl"/>
    <bean id="customerDao" class="com.eaton.aop.demo5.CustomerDao"/>
    &lt;!&ndash;配置增强&ndash;&gt;
    <bean id="myBeforeAdvice" class="com.eaton.aop.demo5.MyBeforeAdvice"/>
    <bean id="myAroundAdvice" class="com.eaton.aop.demo5.MyAroundAdvice"/>
    &lt;!&ndash;配置自动代理&ndash;&gt;
    <bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="beanNames" value="*Dao"/>
        <property name="interceptorNames" value="myBeforeAdvice"/>
    </bean>-->

<!--    &lt;!&ndash;带切面信息的的自动代理配置&ndash;&gt;
    &lt;!&ndash;配置目标类&ndash;&gt;
    <bean id="studentDao" class="com.eaton.aop.demo6.StudentDaoImpl"/>
    <bean id="customerDao" class="com.eaton.aop.demo6.CustomerDao"/>
    &lt;!&ndash;配置增强&ndash;&gt;
    <bean id="myBeforeAdvice" class="com.eaton.aop.demo6.MyBeforeAdvice"/>
    <bean id="myAroundAdvice" class="com.eaton.aop.demo6.MyAroundAdvice"/>
    &lt;!&ndash;配置切面&ndash;&gt;
    <bean id="myAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
        <property name="pattern" value="com\.eaton\.aop\.demo6\.CustomerDao\.save"/>
        <property name="advice" ref="myAroundAdvice"/>
    </bean>
    &lt;!&ndash;配置自动代理&ndash;&gt;
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/>-->

    <!--aspectj自动代理-->
    <aop:aspectj-autoproxy/>

</beans>